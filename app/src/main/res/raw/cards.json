[
  {
    "question": "Что такое инкапсуляция в объектно-ориентированном программировании?",
    "answer": "Инкапсуляция — это механизм ограничения доступа к данным и методам класса, скрывая их реализацию от пользователя."
  },
  {
    "question": "Какой метод используется для запуска Java-программы?",
    "answer": "Метод `public static void main(String[] args)` используется как точка входа для запуска Java-программы."
  },
  {
    "question": "Что такое полиморфизм в ООП?",
    "answer": "Полиморфизм — это способность объектов принимать множество форм, позволяя одному интерфейсу использоваться для общего класса действий."
  },
  {
    "question": "Объясните разницу между интерфейсом и абстрактным классом в Java.",
    "answer": "Интерфейс объявляет методы без реализации, а абстрактный класс может содержать как абстрактные, так и конкретные методы. Класс может реализовывать несколько интерфейсов, но наследовать только один абстрактный класс."
  },
  {
    "question": "Что такое сборщик мусора в Java?",
    "answer": "Сборщик мусора — это процесс автоматического управления памятью, который удаляет объекты, не имеющие ссылок, освобождая память."
  },
  {
    "question": "Как вы можете создать неизменяемый объект в Java?",
    "answer": "Сделайте класс финальным, пометьте все поля как приватные и финальные, не предоставляйте сеттеры, и избегайте утечки мутабельных объектов через методы."
  },
  {
    "question": "Что такое исключение (exception) в Java?",
    "answer": "Исключение — это событие, которое возникает во время выполнения программы и нарушает нормальный поток инструкции."
  },
  {
    "question": "Какое ключевое слово используется для обработки исключений?",
    "answer": "Ключевые слова `try`, `catch`, `finally` и `throw` используются для обработки исключений."
  },
  {
    "question": "Что такое JVM?",
    "answer": "JVM (Java Virtual Machine) — это виртуальная машина, которая исполняет байт-код Java-программ."
  },
  {
    "question": "Объясните разницу между `==` и `equals()` в Java.",
    "answer": "`==` сравнивает ссылки на объекты, проверяя, указывают ли они на один и тот же объект в памяти, тогда как `equals()` сравнивает содержимое объектов."
  },
  {
    "question": "Что такое класс-обёртка в Java?",
    "answer": "Классы-обёртки (например, Integer, Double) предоставляют объектное представление примитивных типов данных."
  },
  {
    "question": "Что такое наследование в ООП?",
    "answer": "Наследование — это механизм, позволяющий одному классу наследовать поля и методы другого класса."
  },
  {
    "question": "Какой оператор используется для создания нового объекта в Java?",
    "answer": "Оператор `new` используется для создания нового экземпляра класса."
  },
  {
    "question": "Что такое пакет (package) в Java?",
    "answer": "Пакет — это пространство имен, которое организует классы и интерфейсы, предотвращая конфликты имен."
  },
  {
    "question": "Объясните концепцию перегрузки методов.",
    "answer": "Перегрузка методов позволяет иметь несколько методов с одним и тем же именем, но разными параметрами."
  },
  {
    "question": "Что такое массив в Java?",
    "answer": "Массив — это структура данных, которая хранит фиксированный размер последовательности элементов одного типа."
  },
  {
    "question": "Какова роль ключевого слова `static`?",
    "answer": "`static` используется для объявления полей и методов, которые принадлежат классу, а не экземпляру."
  },
  {
    "question": "Что делает метод `finalize()` в Java?",
    "answer": "Метод `finalize()` вызывается сборщиком мусора перед удалением объекта из памяти."
  },
  {
    "question": "Что такое сериализация в Java?",
    "answer": "Сериализация — это процесс преобразования объекта в последовательность байтов для хранения или передачи."
  },
  {
    "question": "Как вы можете реализовать многопоточность в Java?",
    "answer": "Многопоточность может быть реализована с помощью класса `Thread` или интерфейса `Runnable`."
  },
  {
    "question": "Что такое `this` в Java?",
    "answer": "`this` — это ссылка на текущий объект внутри метода или конструктора."
  },
  {
    "question": "Объясните использование ключевого слова `super`.",
    "answer": "`super` используется для обращения к методам и полям родительского класса из производного класса."
  },
  {
    "question": "Что такое интерфейс функционального программирования в Java?",
    "answer": "Это интерфейс с одним абстрактным методом, используемый в лямбда-выражениях и функциональном программировании."
  },
  {
    "question": "Какое назначение имеет ключевое слово `final` в Java?",
    "answer": "`final` используется для обозначения констант (неизменяемых переменных), а также для предотвращения наследования классов или переопределения методов."
  },
  {
    "question": "Что такое JDBC?",
    "answer": "JDBC (Java Database Connectivity) — это API для подключения и выполнения запросов к базам данных из Java-приложений."
  },
  {
    "question": "Как вы можете обрабатывать исключения в Java?",
    "answer": "Используя блоки `try`, `catch` и `finally` для обработки и управления исключениями."
  },
  {
    "question": "Что такое лямбда-выражение в Java?",
    "answer": "Лямбда-выражение — это краткая форма записи анонимного класса, реализующего функциональный интерфейс."
  },
  {
    "question": "Объясните понятие автобоксинга в Java.",
    "answer": "Автобоксинг — это автоматическое преобразование примитивных типов в соответствующие объекты-классы и наоборот."
  },
  {
    "question": "Что такое Enum в Java?",
    "answer": "Enum — это специальный тип данных, представляющий набор констант (неизменяемых значений)."
  },
  {
    "question": "Как вы можете создать поток ввода-вывода в Java?",
    "answer": "Используя классы из пакета `java.io`, такие как `FileInputStream` и `FileOutputStream`."
  },
  {
    "question": "Что такое аннотации в Java?",
    "answer": "Аннотации предоставляют метаданные для классов, методов и полей, которые могут быть использованы во время компиляции или выполнения."
  },
  {
    "question": "Какова роль ключевого слова `volatile`?",
    "answer": "`volatile` сообщает JVM, что значение переменной может изменяться разными потоками и не должно кэшироваться."
  },
  {
    "question": "Что такое JIT-компилятор?",
    "answer": "JIT (Just-In-Time) компилятор компилирует байт-код в машинный код во время выполнения для повышения производительности."
  },
  {
    "question": "Объясните понятие `String Pool` в Java.",
    "answer": "`String Pool` — это специальная область в памяти, где хранятся строковые литералы для экономии памяти и повышения производительности."
  },
  {
    "question": "Что такое garbage collection root (GC root)?",
    "answer": "GC root — это исходные точки, от которых начинается процесс сборки мусора для определения достижимых объектов."
  },
  {
    "question": "Как работает `HashMap` в Java?",
    "answer": "`HashMap` хранит данные в виде пар ключ-значение, используя хэширование для быстрого доступа."
  },
  {
    "question": "Что такое `ClassLoader` в Java?",
    "answer": "`ClassLoader` отвечает за загрузку классов в JVM во время выполнения."
  },
  {
    "question": "Каковы различия между `ArrayList` и `LinkedList`?",
    "answer": "`ArrayList` основан на динамическом массиве и обеспечивает быстрый доступ по индексу, а `LinkedList` основан на связном списке и обеспечивает быструю вставку и удаление."
  },
  {
    "question": "Что такое `Serialization UID`?",
    "answer": "`Serialization UID` — это уникальный идентификатор класса, используемый при десериализации для проверки соответствия класса."
  },
  {
    "question": "Как вы можете создать неизменяемый класс?",
    "answer": "Сделав класс финальным, все поля приватными и финальными, и не предоставляя методов, изменяющих состояние объекта."
  },
  {
    "question": "Что такое рефлексия в Java?",
    "answer": "Рефлексия позволяет программе анализировать или изменять поведение приложения во время выполнения."
  },
  {
    "question": "Объясните понятие `daemon` потоков.",
    "answer": "Daemon-потоки — это фоновые потоки, которые JVM завершает при завершении всех обычных потоков."
  },
  {
    "question": "Что такое `try-with-resources` в Java?",
    "answer": "`try-with-resources` — это конструкция, которая автоматически закрывает ресурсы после завершения работы блока `try`."
  },
  {
    "question": "Какова разница между `String`, `StringBuilder` и `StringBuffer`?",
    "answer": "`String` неизменяемый, `StringBuilder` изменяемый и не синхронизированный, `StringBuffer` изменяемый и синхронизированный."
  },
  {
    "question": "Что такое `ConcurrentHashMap`?",
    "answer": "`ConcurrentHashMap` — это потокобезопасная реализация `HashMap`, позволяющая конкурентный доступ без блокировок на весь объект."
  },
  {
    "question": "Как вы можете выполнить сортировку коллекции?",
    "answer": "Используя метод `Collections.sort()` или реализуя интерфейс `Comparable`/`Comparator`."
  },
  {
    "question": "Что такое `Optional` в Java 8?",
    "answer": "`Optional` — это контейнер для значения, которое может быть `null`, используемый для предотвращения `NullPointerException`."
  },
  {
    "question": "Объясните понятие поточно-ориентированного программирования (Stream API).",
    "answer": "Stream API предоставляет функциональные операции на потоках данных для упрощения обработки коллекций."
  },
  {
    "question": "Что такое `CompletableFuture` в Java?",
    "answer": "`CompletableFuture` — это класс для обработки асинхронных операций с возможностью их композиции."
  },
  {
    "question": "Как работает механизм загрузки классов в Java?",
    "answer": "Загрузка классов происходит поэтапно: загрузка, связывание и инициализация, с использованием различных ClassLoader'ов."
  },
  {
    "question": "Что такое слабая ссылка (WeakReference)?",
    "answer": "Слабая ссылка позволяет объекту быть собранным сборщиком мусора, если на него больше нет сильных ссылок."
  },
  {
    "question": "Как вы можете защитить объект от изменения в многопоточном окружении?",
    "answer": "Используя ключевое слово `synchronized`, классы из `java.util.concurrent` или другие механизмы синхронизации."
  },
  {
    "question": "Что такое `Deadlock` и как его избежать?",
    "answer": "Deadlock — это ситуация, когда два или более потоков навсегда заблокированы, ожидая ресурсов друг друга. Избегать можно путем правильного порядка захвата ресурсов и использования таймаутов."
  },
  {
    "question": "Объясните понятие `Fork/Join` фреймворка.",
    "answer": "Фреймворк `Fork/Join` используется для параллельного выполнения задач, которые могут быть разделены на подзадачи."
  },
  {
    "question": "Что такое `Method Reference` в Java 8?",
    "answer": "Ссылка на метод — это упрощенный способ обращения к методам или конструкторам, используя `::` оператор."
  },
  {
    "question": "Как работает `TreeMap` в Java?",
    "answer": "`TreeMap` хранит пары ключ-значение в отсортированном порядке на основе естественного порядка ключей или заданного компаратора."
  },
  {
    "question": "Что такое `BigDecimal` и когда его использовать?",
    "answer": "`BigDecimal` — это класс для точных расчетов с плавающей точкой, часто используемый в финансовых приложениях."
  },
  {
    "question": "Объясните различия между `Callable` и `Runnable`.",
    "answer": "`Callable` возвращает значение и может выбрасывать исключения, а `Runnable` не возвращает значения и не выбрасывает проверяемые исключения."
  },
  {
    "question": "Что такое `Phaser` в Java?",
    "answer": "`Phaser` — это синхронизатор для управления фазами параллельных задач, улучшенная версия `CyclicBarrier` и `CountDownLatch`."
  },
  {
    "question": "Как вы можете реализовать шаблон Singleton в Java?",
    "answer": "Создав класс с приватным конструктором, статическим методом доступа и храня единственный экземпляр в статическом поле."
  },
  {
    "question": "Что такое `OutOfMemoryError` и как его предотвратить?",
    "answer": "`OutOfMemoryError` возникает, когда JVM не может выделить память для объекта. Предотвращается путем оптимизации использования памяти и настройкой параметров JVM."
  },
  {
    "question": "Объясните понятие `Effective Java`.",
    "answer": "«Effective Java» — это книга Джошуа Блоха, содержащая лучшие практики и рекомендации по программированию на Java."
  },
  {
    "question": "Что такое `SoftReference` в Java?",
    "answer": "`SoftReference` — это ссылка, которая удерживает объект до тех пор, пока JVM не потребуется память, после чего объект может быть собран."
  },
  {
    "question": "Как работает `String.intern()` метод?",
    "answer": "`intern()` добавляет строку в пул строк и возвращает ссылку из пула, что позволяет экономить память при работе с одинаковыми строками."
  },
  {
    "question": "Что такое `java.lang.reflect.Proxy`?",
    "answer": "`Proxy` позволяет создавать динамические прокси для интерфейсов во время выполнения, перехватывая вызовы методов."
  },
  {
    "question": "Объясните использование `ReentrantLock`.",
    "answer": "`ReentrantLock` — это альтернатива ключевому слову `synchronized`, предоставляющая дополнительные возможности управления блокировками."
  },
  {
    "question": "Что такое `ThreadLocal` в Java?",
    "answer": "`ThreadLocal` позволяет создавать переменные, доступные только конкретному потоку, обеспечивая изоляцию данных между потоками."
  },
  {
    "question": "Как работает `CopyOnWriteArrayList`?",
    "answer": "`CopyOnWriteArrayList` создает копию внутреннего массива при каждой модификации, что обеспечивает потокобезопасность без необходимости синхронизации чтения."
  },
  {
    "question": "Что такое `Atomic` классы в Java?",
    "answer": "`Atomic` классы предоставляют операции чтения и записи, которые являются атомарными и потокобезопасными без использования синхронизации."
  },
  {
    "question": "Какова роль `Transient` модификатора?",
    "answer": "`Transient` используется для полей, которые не должны быть сериализованы при сериализации объекта."
  },
  {
    "question": "Что такое `ExecutorService`?",
    "answer": "`ExecutorService` — это фреймворк для управления пулом потоков и выполнения асинхронных задач."
  },
  {
    "question": "Объясните понятие `Bounded Wildcards` в дженериках.",
    "answer": "Ограниченные подстановочные знаки (`<? extends T>`, `<? super T>`) используются для ограничения типов, которые могут быть использованы в обобщенных классах или методах."
  },
  {
    "question": "Что такое `Marker Interface`?",
    "answer": "`Marker Interface` — это интерфейс без методов, используемый для пометки классов, чтобы предоставить им определенное поведение (например, `Serializable`)."
  },
  {
    "question": "Как вы можете выполнить сортировку массива примитивов?",
    "answer": "Используя метод `Arrays.sort()` из класса `java.util.Arrays`."
  },
  {
    "question": "Что такое `Nan` в Java?",
    "answer": "`NaN` (Not a Number) — это специальное значение типа `double` или `float`, обозначающее результат неопределенных или недопустимых математических операций."
  },
  {
    "question": "Объясните использование `assert` в Java.",
    "answer": "Оператор `assert` используется для проверки утверждений во время выполнения, обычно для отладки и тестирования."
  },
  {
    "question": "Что такое `Memory Leak` и как его избежать?",
    "answer": "Утечка памяти происходит, когда объекты больше не используются, но ссылки на них сохраняются, препятствуя сборке мусора. Избегается путем надлежащего управления жизненным циклом объектов и ссылок."
  },
  {
    "question": "Как вы можете реализовать шаблон проектирования `Observer`?",
    "answer": "Используя интерфейсы `Observer` и `Observable`, или реализуя собственные механизмы подписки и уведомления."
  },
  {
    "question": "Что такое `Functional Interface`?",
    "answer": "Это интерфейс с одним абстрактным методом, используемый для лямбда-выражений и функционального программирования."
  },
  {
    "question": "Объясните разницу между `fail-fast` и `fail-safe` итераторами.",
    "answer": "`Fail-fast` итераторы выбрасывают `ConcurrentModificationException`, если коллекция модифицируется, а `fail-safe` создают копию коллекции и продолжают итерацию."
  },
  {
    "question": "Что такое `Maven`?",
    "answer": "`Maven` — это инструмент управления проектами и автоматизации сборки, используемый для управления зависимостями и сборки приложений."
  }
]
